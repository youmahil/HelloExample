name: CD with Gradle and push dockerhub

# 언제 이 파일의 내용이 실행될 것인지 정의 
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 정의
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

# 실제 실행될 내용들을 정의
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
        # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - name: Checkout Source
      uses: actions/checkout@v3

    # open jdk 17 버전 환경을 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.properties
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash	 

    # Gradle Build
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # Docker build and Push to Docker registry
    - name: Docker build & push to docker repo
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/gitea-echo-demo:0.0.1 .
        docker push ${{ secrets.DOCKER_REPO }}/gitea-echo-demo:0.0.1

# Deploy to Server
#    - name: Deploy to server
#      uses: appleboy/ssh-action@master
#      id: deploy
#      with:
#        host: ${{ secrets.HOST }}
#        username: ubuntu
#        key: ${{ secrets.KEY }}
#        envs: GITHUB_SHA
#      script: |
#        sudo docker rm -f $(docker ps -qa)
#        sudo docker pull ${{ secrets.DOCKER_REPO }}/gitea-echo-demo:0.0.1
#        docker-compose up -d
#        docker image prune -f