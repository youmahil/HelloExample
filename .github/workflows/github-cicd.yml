name: CD with Gradle and push dockerhub

# 언제 이 파일의 내용이 실행될 것인지 정의 
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 정의
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: docker.io/yaongdocker/github-echo-demo
  
# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

# 실제 실행될 내용들을 정의
jobs:
  build-push-docker:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
        # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - name: Checkout Source
      uses: actions/checkout@v3

    # open jdk 17 버전 환경을 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.properties
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash	 

    # Gradle Build
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        pwd && ls -laF
        ./gradlew clean build -x test
        pwd && ls -laF

    # for Docker Image Tagging
    - name: Get Tagging verion
      id: image
      run: |
        VERSION=$(echo ${{ github.sha }} | cut -c1-8)
        echo VERSION=$VERSION
        echo "::set-output name=version::$VERSION"
          
    # Docker build and Push to Docker registry
    - name: Login to GitHub Packages Container Registry
      uses: docker/login-action@v1
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#    - name: Push to GitHub Packages
#      uses: docker/build-push-action@v2
#      with:
#        push: true
#        tags: |
#          ${{ env.IMAGE_NAME }}:${{ steps.image.outputs.version }}    
    
    - name: Docker build & push to docker repo
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/github-echo-demo:${{ steps.image.outputs.version }} .
        docker push ${{ secrets.DOCKER_REPO }}/github-echo-demo:${{ steps.image.outputs.version }}

# Deploy to K8s Triggering
  deploy-to-k8s-triggr:
    runs-on: ubuntu-latest
    needs: build-push-docker

    steps:    
    - name: Get Taggong verion
      id: image
      run: |
        VERSION=$(echo ${{ github.sha }} | cut -c1-8)
        echo VERSION=$VERSION
        echo "::set-output name=version::$VERSION"

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1

    - name: Checkout kustomize repository
      uses: actions/checkout@v2
      with:
        repository: youmahil/ManifestExample
        token: ${{ secrets.ACTION_TOKEN }}
        path: ManifestExample

    - name: Update Kubernetes resources
      run: |
        cd ManifestExample/overlays/dev/
        kustomize edit set image ${{ env.IMAGE_NAME }}:${{ steps.image.outputs.version }}
        cat kustomization.yaml

    - name: Commit files
      run: |
        cd ManifestExample
        git config --global user.email "youmahil@bluedigm.com"
        git config --global user.name "YAONG"
        git commit -am "Update image tag"
        git push -u origin main
